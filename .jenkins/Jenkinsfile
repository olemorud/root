/*
    Jenkins pipeline for building ROOT on a Docker image.

    The Docker images are pre-shipped with the needed dependencies, such as cmake.

    This pipeline is (as of Sep 2022) used by a multi-config job to build ROOT on ~14
    different platforms.

    maintainer: ole.kristian.morud@cern.ch
*/

pipeline {
    agent none

    parameters{
        string(
            name: 'BRANCH',
            defaultValue: 'master',
            description: 'The branch of root to build'
        )
        string(
            name: 'PLATFORM',
            defaultValue: 'ubuntu22',
            description: 'The image to build. See: https://github.com/olemorud/root-build-ready'
        )
        booleanParam(
            name: 'INCREMENTAL',
            defaultValue: true,
            description: 'Use previous build artifacts to speed up build'
        )
        //string(
        //    name: 'BUILD_OPTIONS',
        //    defaultValue: '',
        //    description: 'Options to pass to CMake, e.g. -DCMAKE_CXX_STANDARD=17'
        //)
    }

    stages {
        stage('Set display name'){
            steps {
                script {
                    currentBuild.displayName = "${PLATFORM}-${BRANCH}"
                }
            }
        }

        /*
            Runs when PLATFORM is not *win* or mac*
        */
        stage('Build on Linux in Docker') {
            when {
                beforeAgent true
                not {
                    expression { PLATFORM ==~ /(.*win.*|mac.*)/ }
                }
            }
            agent {
                docker {
                    label 'docker-host-noafs'
                    image "ghcr.io/olemorud/${params.PLATFORM}:buildready"
                    args '''
                        --net=host
                        --pull=always
                        -u=root
                        -e BRANCH=${params.BRANCH}
                    '''
                }
            }
            steps {
                withCredentials(
                    [string(credentialsId: 'root-s3', variable: 'OS_APPLICATION_CREDENTIAL_SECRET')]
                ) {
                    sh 'chmod u+x ./.jenkins/installroot.sh && ./.jenkins/installroot.sh'
                }
            }
            post { failure {
                notifyFail(BRANCH, PLATFORM)
            }}
        }

        /*
            Runs when PLATFORM matches mac*
        */
        stage('Build on Mac') {
            when {
                beforeAgent true
                expression { PLATFORM ==~ /mac.*/ }
            }
            agent { label "${PLATFORM}" }
            steps {
                withCredentials(
                    [string(credentialsId: 'root-s3', variable: 'OS_APPLICATION_CREDENTIAL_SECRET')]
                ) {
                    sh 'chmod u+x ./.jenkins/installroot.sh && ./.jenkins/installroot.sh'
                }
            }
            post { failure {
                notifyFail(BRANCH, PLATFORM)
            }}
        }

        /*
            Runs when PLATFORM matches *win*
        */
        stage('Build on Windows') {
            when {
                beforeAgent true
                expression { PLATFORM ==~ /.*win.*/ }
            }
            agent { label "${PLATFORM}" }
            steps {
                withCredentials(
                    [string(credentialsId: 'root-s3', variable: 'OS_APPLICATION_CREDENTIAL_SECRET')]
                ) {
                    ansiColor('xterm'){
                        powershell './.jenkins/installroot.ps1'
                    }
                }
            }
            post { failure {
                notifyFail(BRANCH, PLATFORM)
            }}
        }
    }
}

def notifyFail(BRANCH, PLATFORM){
    mattermostSend (
        channel: '#jenkins-notification-test',
        endpoint: 'https://mattermost.web.cern.ch/hooks/x9pg89zxw78oikemnw5huafn7e',
        message: "Build failed - Branch \"${BRANCH}\" on platform \"${PLATFORM}\"",
        icon: 'https://toppng.com/uploads/preview/butthead-acdc-11549475832jltej3r74n.png'
    )
}
